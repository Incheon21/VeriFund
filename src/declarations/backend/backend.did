type http_request_result = 
 record {
   body: blob;
   headers: vec http_header;
   status: nat;
 };
type http_header = 
 record {
   name: text;
   value: text;
 };
type VeriFund = 
 service {
   createCampaign: (principal, text, text, nat, Time) -> (bool);
   donate: (principal, text, nat) -> (bool);
   getAuditor: (text) -> (opt principal) query;
   getCampaigns: () -> (vec Campaign) query;
   getCampaignsByUser: (principal) -> (vec Campaign) query;
   getCertifiedData: () -> (blob) query;
   getDonationsByID: (text) -> (vec Donation) query;
   getDonationsByUser: (principal) -> (vec Donation) query;
   getICPUSD: () -> (text);
   getMyPendingCampaigns: (principal) -> (vec text) query;
   getMyStake: (principal) -> (nat) query;
   getProofs: (text) -> (vec Proof) query;
   pickAuditor: (text) -> (bool);
   releaseDecision: (text, bool) -> (bool);
   stakeAsAuditor: (nat) -> (bool);
   submitProof: (text, text, text) -> (bool);
   transform: (record {
                 context: blob;
                 response: http_request_result;
               }) -> (http_request_result) query;
   whoami: () -> (principal) query;
 };
type Time = int;
type Proof = 
 record {
   description: text;
   timestamp: Time;
   url: text;
   verified: bool;
 };
type Donation = 
 record {
   amount: nat;
   donor: principal;
   timestamp: Time;
 };
type CampaignStatus = 
 variant {
   active;
   pending_release;
   released;
 };
type Campaign = 
 record {
   collected: nat;
   date: Time;
   description: text;
   id: text;
   owner: principal;
   status: CampaignStatus;
   target: nat;
   title: text;
 };
service : () -> VeriFund
