type http_request_result = 
 record {
   body: blob;
   headers: vec http_header;
   status: nat;
 };
type http_header = 
 record {
   name: text;
   value: text;
 };
type VeriFund = 
 service {
   createCampaign: (principal, text, text, nat, Time) -> (bool);
   deleteCampaignFile: (principal, text, text) -> (bool);
   donate: (principal, text, nat) -> (bool);
   getAuditor: (text) -> (opt principal) query;
   getBalance: (Account__1) -> (Result_3);
   getCampaignAccount: (nat) -> (Account__1);
   getCampaignFileChunk: (text, nat) -> (opt blob) query;
   getCampaignFileTotalChunks: (text) -> (nat) query;
   getCampaignFileType: (text) -> (opt text) query;
   getCampaigns: () -> (vec Campaign) query;
   getCampaignsByUser: (principal) -> (vec Campaign) query;
   getCanisterAccount: () -> (Account__1);
   getCertifiedData: () -> (blob) query;
   getDonationsByID: (text) -> (vec Donation) query;
   getDonationsByUser: (principal) -> (vec Donation) query;
   getICPUSD: () -> (text);
   getMyPendingCampaigns: (principal) -> (vec text) query;
   getMyStake: (principal) -> (nat) query;
   pickAuditor: (text) -> (bool);
   recordDonation: (nat, nat) -> (Result_2);
   releaseDecision: (text, bool) -> (bool);
   stakeAsAuditor: (nat) -> (bool);
   transfer: (TransferArgs) -> (Result_1);
   transform: (record {
                 context: blob;
                 response: http_request_result;
               }) -> (http_request_result) query;
   uploadCampaignFile: (principal, text, text, blob, nat, text) -> (bool);
   verifyTransaction: (BlockIndex) -> (Result);
   whoami: () -> (principal) query;
 };
type TransferArgs = 
 record {
   amount: nat;
   toAccount: Account;
 };
type Time = int;
type Result_3 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_2 = 
 variant {
   err: text;
   ok: text;
 };
type Result_1 = 
 variant {
   err: text;
   ok: BlockIndex;
 };
type Result = 
 variant {
   err: text;
   ok: bool;
 };
type FileChunk = 
 record {
   chunk: blob;
   index: nat;
 };
type File = 
 record {
   chunks: vec FileChunk;
   fileType: text;
   name: text;
   totalSize: nat;
 };
type Donation = 
 record {
   amount: nat;
   donor: principal;
   timestamp: Time;
 };
type CampaignStatus = 
 variant {
   active;
   pending_release;
   released;
 };
type Campaign = 
 record {
   collected: nat;
   date: Time;
   description: text;
   file: opt File;
   id: text;
   owner: principal;
   status: CampaignStatus;
   target: nat;
   title: text;
 };
type BlockIndex = nat;
type Account__1 = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
service : () -> VeriFund
